# Action

---

- name: Install Application packages
  package:
    name: '{{ djsite_packages }}'
    state: present
  become: yes
  tags: packages

- block:
    - name: Create Application directories
      file:
        name: '{{ item.name }}'
        owner: '{{ djsite_daemon_user }}'
        group: '{{ djsite_daemon_group }}'
        mode: '{{ item.mode }}'
        state: directory
      loop:
        - { name: '{{ djsite_app_directory }}',             mode: 755 }
        - { name: '{{ djsite_app_directory }}/.ssh',        mode: 700 }
        - { name: '{{ djsite_app_directory }}/.tmp',        mode: 700 }
        - { name: '{{ djsite_app_directory }}/data',        mode: 755 }
        - { name: '{{ djsite_app_directory }}/source',      mode: 755 }
        - { name: '{{ djsite_app_directory }}/releases',    mode: 755 }
        - { name: '{{ djsite_app_directory }}/run',         mode: 775 }
        - { name: '{{ djsite_app_directory }}/test/server', mode: 755 }
        - { name: '{{ djsite_data_directory }}/media',      mode: 755 }
        - { name: '{{ djsite_data_directory }}/releases',   mode: 755 }
        - { name: '{{ djsite_log_directory }}',             mode: 750 }

    - name: Create Bower components directory
      file:
        name: '{{ djsite_app_directory }}/test/server/bower/bower_components'
        owner: '{{ djsite_daemon_user }}'
        group: '{{ djsite_daemon_group }}'
        mode: 0755
        state: directory
      when: djsite_bower_enabled|bool

    - name: Create link to Application media directory
      file:
        src: '{{ djsite_data_directory }}/media'
        dest: '{{ djsite_app_directory }}/test/server/media'
        force: yes
        state: link

    - block:
        - name: Install Application repository SSH key pair
          copy:
            src: '{{ item.path }}'
            dest: '{{ djsite_app_directory }}/.ssh/{{ item.name }}'
            owner: '{{ djsite_daemon_user }}'
            group: '{{ djsite_daemon_group }}'
            mode: 0600
          diff: not item.hidden|bool
          loop:
            - { path: '{{ djsite_ssh_key_private }}', name: 'id_rsa',     hidden: yes }
            - { path: '{{ djsite_ssh_key_public }}',  name: 'id_rsa.pub', hidden: no  }
          loop_control:
            label: '{{ item.name }}'
          no_log: item.hidden|bool

        - name: Register Application repository RSA key
          known_hosts:
            name: '{{ djsite_repository_host }}'
            key: '{{ djsite_repository_key }}'
            state: present
          become_user: '{{ djsite_daemon_user }}'
      when: not djsite_repository_is_local|bool or djsite_has_private_requirements|bool
  become: yes
  tags: config

# Release

- block:
    - import_tasks: deploy-release.yml
    - import_tasks: finalize-release.yml
    - import_tasks: migrate-database.yml
    - include_tasks: release-{{ djsite_release_mode }}.yml
    - import_tasks: sync-release.yml
  become: yes
  tags: update

# Application Process

- block:
    - name: Remove Application process configuration
      file:
        path: /etc/supervisor/conf.d/{{ djsite_instance_name }}-process.conf
        state: absent
      when: not djsite_process_enabled|bool

    - name: Configure Application process
      template:
        src: '{{ djsite_process_config_file }}'
        dest: /etc/supervisor/conf.d/{{ djsite_instance_name }}-process.conf
        mode: 0644
      notify: restart application process
      when: djsite_process_enabled|bool

    - name: Setup Application process
      supervisorctl:
        name: '{{ djsite_instance_name }}-process:'
        state: '{{ item }}'
      loop:
        - "{{ djsite_process_enabled|bool|ternary('present', 'absent') }}"
  become: yes
  tags: [applications, config]

# Release

- block:
    - import_tasks: activate-release.yml
      tags: activate

    - import_tasks: cleanup-releases.yml
      tags: cleanup
  become: yes
  tags: update

# Application Process

- name: Toggle Application process
  supervisorctl:
    name: '{{ djsite_instance_name }}-process:'
    state: '{{ item }}'
  become: yes
  loop:
    - "{{ djsite_process_enabled|bool|ternary('started', 'absent') }}"
  tags: [applications, services]

# Celery Workers

- block:
    - name: Configure Celery workers
      template:
        src: "{{ item.value.config_file|default('example.celery.worker.conf.j2') }}"
        dest: /etc/supervisor/conf.d/{{ djsite_instance_name }}-celery-{{ item.value.name }}.conf
        mode: 0644
      loop_control:
        label: '{{ item.value.name }}'
      notify: restart celery workers
      with_dict: '{{ djsite_celery_workers }}'

    - name: Install Celery workers
      supervisorctl:
        name: '{{ djsite_instance_name }}-celery-{{ item.value.name }}'
        state: present
      loop_control:
        label: '{{ item.value.name }}'
      with_dict: '{{ djsite_celery_workers }}'

    - name: Setup periodic copy of Celery beat DB to shared storage
      cron:
        name: 'Copy {{ djsite_instance_name }}-celery-{{ item.value.name }} database to shared storage'
        job: 'cp {{ djsite_app_directory }}/data/celery-beat.db.* {{ djsite_data_directory }}/'
        minute: '*/5'
        user: '{{ djsite_daemon_user }}'
        state: present
      loop_control:
        label: '{{ item.value.name }}'
      notify: restart cron
      when: item.value.type == 'beat'
      with_dict: '{{ djsite_celery_workers }}'
  become: yes
  tags: [workers, config]

- block:
    - name: Start Celery workers
      supervisorctl:
        name: '{{ djsite_instance_name }}-celery-{{ item.value.name }}'
        state: started
      ignore_errors: yes
      loop_control:
        label: '{{ item.value.name }}'
      register: _djsite_celery_start
      with_dict: '{{ djsite_celery_workers }}'

    - name: Trigger Celery workers restart
      command: >
        ls /dev/null
      changed_when: yes
      check_mode: no
      notify: restart celery workers
      tags: update
      when: _djsite_celery_start is undefined or _djsite_celery_start is failure
  become: yes
  tags: [workers, services]
